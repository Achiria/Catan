/*
 * Copyright (C) 2014 Anthony Gamboa
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package catan1.pkg1;

/**
 *
 * @author Anthony Gamboa
 */
public class Cards
{
    public static void addCards()
    {
        final int WIDTH = 7;
        final int HEIGHT = 7;
        String[] corners =
        {
            "TR", "TL", "ML", "LL", "LR", "MR"
        };

        //  hay = 0
        //  sheep = 1
        //  wood = 2
        //  brick = 3
        //  ore = 4
        // desert = 5;
        for (int i = 0; i < WIDTH; i++)
        {
            for (int j = 0; j < HEIGHT; j++)
            {
                try
                {
                    for (int k = 0; k < corners.length; k++)
                    {
                        if (Board.table[i][j].get(corners[k]).getType() instanceof Building)
                        {
                            Building set = Board.table[i][j].get(corners[k]).getType();

                            int toAdd;

                            if (set instanceof Settlement)
                            {
                                toAdd = 1;
                            }

                            else
                            {
                                toAdd = 2;
                            }

                            if (Board.table[i][j].getNumb() == Actions.getNumRolled())
                            {
                                set.getOwner().addHand(Board.table[i][j].getResource(), toAdd);
                            }

                            switch (corners[k])
                            {
                                case "TR":
                                    if (Board.table[i][j - 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i][j - 1].getResource(), 2);
                                    }
                                    if (Board.table[i + 1][j].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i + 1][j].getResource(), 2);
                                    }
                                case "TL":
                                    if (Board.table[i][j - 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i][j - 1].getResource(), 2);
                                    }
                                    if (Board.table[i - 1][j].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i - 1][j].getResource(), 2);
                                    }
                                case "ML":
                                    if (Board.table[i - 1][j].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i - 1][j].getResource(), 2);
                                    }
                                    if (Board.table[i - 1][j + 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i - 1][j + 1].getResource(), 2);
                                    }
                                case "LL":
                                    if (Board.table[i - 1][j + 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i - 1][j + 1].getResource(), 2);
                                    }
                                    if (Board.table[i][j + 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i][j + 1].getResource(), 2);
                                    }
                                case "LR":
                                    if (Board.table[i][j + 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i][j + 1].getResource(), 2);
                                    }
                                    if (Board.table[i + 1][j + 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i + 1][j + 1].getResource(), 2);
                                    }
                                case "MR":
                                    if (Board.table[i + 1][j].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i + 1][j].getResource(), 2);
                                    }
                                    if (Board.table[i + 1][j + 1].getNumb() == Actions.getNumRolled())
                                    {
                                        set.getOwner().addHand(Board.table[i + 1][j + 1].getResource(), 2);
                                    }
                            }
                        }
                    }
                }
                catch (invalidLocationException ex)
                {
                    System.out.println("FAIL in settlementComponent");
                }
            }
        }
    }
}
